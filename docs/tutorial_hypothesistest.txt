Details on the output pf -p

In this example we will look more closely at the output of the hypothesis tests we run in the last example in order to understand better what -p is doing. Understanding the output of -p is very helpful in case there are problems. 

Let's look at the log file:

less out.log

1. Free fit of the background + signal model

Starting from the line containing

<INFO> ConfigManager: Created Fit Config: SPlusB

we see the configuration file read in. In this case we do not need to build the workspace (as we have done it earlier), so the next steps in already specific to calling '-p'. 
First, '-p' first runs a free fit:

<INFO> ConfigMgrCPP: Processing analysis Sig

which concludes with the fit result:

  RooFitResult: minimized FCN value: -0.650645, estimated distance to minimum: 3.58326e-06
                covariance matrix quality: Full, accurate covariance matrix
                Status : MINIMIZE=0 

    Floating Parameter    FinalValue +/-  Error   
  --------------------  --------------------------
                  Lumi    1.0000e+00 +/-  3.88e-02
             alpha_cor   -6.6577e-04 +/-  9.93e-01
             alpha_ucb    1.8890e-04 +/-  9.93e-01
             alpha_ucs   -6.7408e-05 +/-  9.93e-01
  gamma_stat_UserRegion_cuts_bin_0    1.0002e+00 +/-  2.22e-01
                mu_Sig    4.0056e-01 +/-  6.67e-01

This first fit is done using the FreeFit function in src/Utils.cxx. This function executes a slightly simplified fit in comparison to the standard '-f' option. The main difference is that all channels included in the workspace will be fitted, regardless if control, validation or signal region. The purpose of first executing some free fit of the background + signal model is to give the user some indication on if the hypothesis tests following might be affected by fit failures or not. We can store the result of the free fit in an external file for later use. (These fit results are in fact used in the step 'Creating a list file' in Part 5 below.)

2. Hypothesis tests

After the free fit HistFitter hands over to RootStats code and the further output depends on which test statistics and calculator type were chosen. E.g. in this example we have used the so-called asymptotic calculator (configMgr.calculatorType=2) and an one-sided profile likelihood test statistics (configMgr.testStatType=3).

The sequence of various hypothesis tests starts with the lines:

<INFO> HypoTestTool: >>> Running HypoTestInverter on the workspace combined
<INFO> HypoTestTool: >>> Setting up HypoTestInverter on the workspace combined
<INFO> HypoTestTool: >>> Setting up HypoTestCalculator on the workspace <combined>
<INFO> HypoTestTool: >>> Setting up HypoTest for : exclusion
<INFO> HypoTestTool: Using data set obsData

which informs you that
a) you are calculating some exclusion limits (and not a discovery sensitivity)
b) make the hypothesis tests on observed data

Then, another free fit is performed which determines the best fitted values for all nuisance and normalization parameters:

Info in <StandardHypoTestInvDemo>:  Doing a first fit to the observed data

which concludes with 

<INFO> HypoTestTool: StandardHypoTestInvDemo - Best Fit value : mu_Sig = 0.404772 +/- 0.629833

and

[#1] INFO:ObjectHandling -- RooWorkspace::saveSnaphot(combined) replacing previous snapshot with name ModelConfig__snapshot

This last line informs you that the new fitted values are attached to the signal+background model in a 'snapshot'.

Only after this fit is concluded, the asymptotic calculator is constructed.
The various processes that the asymptotic calculator runs can be looked up in https://root.cern.ch/root/html534/src/RooStats__AsymptoticCalculator.cxx.html#v0jbIC and in https://root.cern.ch/root/html534/src/RooStats__AsymptoticCalculator.cxx.html#Rua8gE

This can be summarized as:

* Part 1: Setting up the asymptotic calculator and building the Asimov dataset:

- Evaluate the unconditional nll for the full model on the  observed data

  In the log file this part starts with

  [#0] PROGRESS:Eval -- AsymptoticCalculator: Find  best unconditional NLL on observed data

  and concludes with

  [#0] PROGRESS:Eval -- Best fitted POI value = 0.401324 +/- 0.667405

- Compute Asimov data set for the background (alt poi ) value

  This part starts with 

  [#0] PROGRESS:Eval -- AsymptoticCalculator: Building Asimov data Set

  and evaluates the best-fitted values for the nuisance parameters and a signal strength of 0.

- Evaluate  the likelihood on Asimov data

  This part starts with 

  [#0] PROGRESS:Eval -- AsymptoticCalculator: Find  best conditional NLL on ASIMOV data set for given alt POI ( mu_Sig ) = 0

Part 1 concludes with

<INFO> HypoTestTool: >>> Done setting up HypoTestCalculator on the workspace combined

* Part 2: Executing the hypothesis tests

Part 2 starts with the message:

<INFO> HypoTestTool: Doing a fixed scan  in interval : 1 , 1

(telling us that we will only test a signal strength of 1 but no other one. This is the main difference to the upper limit calculation in which multiple signal strengths are considered.)
Again, we have various parts:

- make conditional fit on null snapshot of poi and evaluate the conditional NLL on the observed data for the snapshot value

  You see this in the log file after the message:

  [#1] INFO:Eval -- AsymptoticCalculator::GetHypoTest: - perform  an hypothesis test for  POI ( mu_Sig ) = 1
  [#0] PROGRESS:Eval -- AsymptoticCalculator::GetHypoTest -  Find  best conditional NLL on OBSERVED data set .....

- create an HypoTest result but where the sampling distributions are set to zero
  
  You see this part starting from 

  [#0] PROGRESS:Eval -- AsymptoticCalculator::GetHypoTest -- Find  best conditional NLL on ASIMOV data set .... 

Using the results of the last two steps the CLs value is calculated:

[#0] PROGRESS:Eval -- P values for  mu_Sig =  1
        CLs      = 0.301765 +/- 0
        CLb      = 0.736093 +/- 0
        CLsplusb = 0.222127 +/- 0

If there is a failure in '-p' it is important to understand which of the six (!) fits done is the failing one. This particular fit can then be rebuild outside of '-p' and debugged further. We will explain this in an example in the advanced tutorial. 






